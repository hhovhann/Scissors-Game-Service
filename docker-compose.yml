services:
  postgres_db:
    image: 'postgres:latest'
    container_name: postgres_db
    restart: always
    env_file: ./.env
    ports:
      - ${POSTGRES_LOCAL_PORT}:${POSTGRES_DOCKER_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  redis_cache:
    image: redis:latest
    container_name: redis_cache
    ports:
      - ${REDIS_LOCAL_PORT}:${REDIS_DOCKER_PORT}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  app:
    container_name: app
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    build: .
    restart: on-failure
    env_file: ./.env
    ports:
      - ${SPRING_APP_LOCAL_PORT}:${SPRING_APP_DOCKER_PORT}
    networks:
      - app-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:${POSTGRES_DOCKER_PORT}/${POSTGRES_DATABASE}
      SPRING_PROFILES_ACTIVE: docker

volumes:
  postgres-data:

networks:
  app-network:
