services:
  postgres_db:
    image: 'postgres:latest'
    restart: always
    env_file: ./.env
    ports:
      - ${POSTGRES_LOCAL_PORT}:${POSTGRES_DOCKER_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  redis_cache:
    image: redis:latest
    ports:
      - ${REDIS_LOCAL_PORT}:${REDIS_DOCKER_PORT}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  app:
    image: app-image # Use a specific image name or build context
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    build: .
    restart: on-failure
    env_file: ./.env
    ports:
      - ${SPRING_APP_LOCAL_PORT}:${SPRING_APP_DOCKER_PORT}
    networks:
      - app-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:${POSTGRES_DOCKER_PORT}/${POSTGRES_DATABASE}
      SPRING_PROFILES_ACTIVE: docker
    deploy:
      replicas: 1  # Number of instances to run
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    depends_on:
      - app

volumes:
  postgres-data:
  grafana-storage:

networks:
  app-network:
